<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何用hexo新建文件并上传</title>
    <url>/2025/02/17/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%B9%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>hexo（博主采用next主题）日常维护教程</p>
<h1 id="修改scaffolds-post-md（默认标题文件）"><a href="#修改scaffolds-post-md（默认标题文件）" class="headerlink" title="修改scaffolds&#x2F;post.md（默认标题文件）"></a>修改scaffolds&#x2F;post.md（默认标题文件）</h1><p>注意修改时不要把中文加进去，在此只起到注释作用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:([1,2]设置同时属于不同类别可以这样)</span><br><span class="line">categories:</span><br><span class="line">top:(表示置顶情况，不置顶不填即可数字大小代表置顶顺序，数字越大排序越前)</span><br></pre></td></tr></table></figure>



<h1 id="新建md文件"><a href="#新建md文件" class="headerlink" title="新建md文件"></a>新建md文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new/hexo n &quot;文件名&quot;</span><br></pre></td></tr></table></figure>

<h1 id="查看新建文件"><a href="#查看新建文件" class="headerlink" title="查看新建文件"></a>查看新建文件</h1><p>进入目录是source&#x2F;_posts</p>
<h1 id="完善标题对应信息，填写md"><a href="#完善标题对应信息，填写md" class="headerlink" title="完善标题对应信息，填写md"></a>完善标题对应信息，填写md</h1><p>也就是刚才上面那堆东西</p>
<h1 id="在blog目录下（因人而异）打开git-bash"><a href="#在blog目录下（因人而异）打开git-bash" class="headerlink" title="在blog目录下（因人而异）打开git bash"></a>在blog目录下（因人而异）打开git bash</h1><p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<p>即可上传</p>
<p>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>即可实时查看网页</p>
<h1 id="插入图片操作"><a href="#插入图片操作" class="headerlink" title="插入图片操作"></a>插入图片操作</h1><p>在hexo&#x2F;blog&#x2F;source（反正不是themes目录下的source）新建一个文件夹picture（名字任意），插入图片前先把图片复制到这，然后再从这复制去md文件里即可</p>
<p>如下面这张图最后路径显示是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![屏幕截图 2025-02-17 171856](./如何用hexo新建文件并上传.assets/屏幕截图 2025-02-17 171856.png)</span><br></pre></td></tr></table></figure>



<p>![屏幕截图 2025-02-17 171856](.&#x2F;如何用hexo新建文件并上传.assets&#x2F;屏幕截图 2025-02-17 171856.png)</p>
]]></content>
      <categories>
        <category>博客维护</category>
      </categories>
      <tags>
        <tag>博客维护</tag>
      </tags>
  </entry>
  <entry>
    <title>寒假科研(持续更新中)</title>
    <url>/2025/02/14/%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/</url>
    <content><![CDATA[<p>寒假科研</p>
<h1 id="2-10"><a href="#2-10" class="headerlink" title="2.10"></a>2.10</h1><h2 id="探索路线"><a href="#探索路线" class="headerlink" title="探索路线"></a>探索路线</h2><p>本来想法是如何从一张带有很多标注（文字、线、锚点等）的图中剥离出原图，其实反过来也可以把图片中的人为添加的噪声去掉，这样一样可以得到一张比较原始的图片。因此这条路线可以被描述为：</p>
<ul>
<li><p>文本与标注检测：利用 OCR 或语义分割方法检测并定位标注文字及线条。</p>
</li>
<li><p>文本与标注去除：利用图像修复、边缘检测、形态学操作等方法去除标注部分。</p>
</li>
<li><p>原图恢复：基于神经网络（如 GAN）或传统方法（如边缘检测+填充）恢复设备原图。</p>
</li>
<li><p>边缘检测与噪声去除</p>
</li>
<li><p>逆文本检测</p>
</li>
</ul>
<p>除此之外，也发现了有算法可以直接进行边缘检测，提取出边界和线段，观察效果大致看出其实也已经顺带把文字给去掉。也就是说 <strong>边缘检测</strong> 也可以作为一个去噪的方法。</p>
<h2 id="已读论文"><a href="#已读论文" class="headerlink" title="已读论文"></a>已读论文</h2><h3 id="文本检测及去除"><a href="#文本检测及去除" class="headerlink" title="文本检测及去除"></a>文本检测及去除</h3><p>目前主要是文本的检测与去除相对成熟，具体论文如下</p>
<ul>
<li><strong>TPFNet: A Novel Text In-painting Transformer for Text Removal</strong></li>
</ul>
<p><a href="https://arxiv.org/pdf/2210.14461">TPFNet-Neaul2022</a></p>
<p><a href="https://github.com/CandleLabAI/TPFNet">TPFNet-Github</a></p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250210160346938-1739480040432-1.png" alt="image-20250210160346938"></p>
<p>此为效果，但是对于去除中文是否同样有效存疑（或者可不可以先引入一个翻译图片中的中文为英文并输出之后再使用该算法）</p>
<ul>
<li><strong>EnsNet: Ensconce Text in the Wild</strong></li>
</ul>
<p><a href="https://ojs.aaai.org/index.php/AAAI/article/view/3859">EnsNet-AAAI2023</a></p>
<p><a href="https://github.com/HCIILAB/Scene-Text-Removal">EnsNet-Github</a></p>
<p>这个个人感觉比上面的好，因为他们已经提供了相对完整的部署过程以及他们训练好的权重也可以下载，效果也很好见下图</p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250210161544607-1739480040433-9.png" alt="image-20250210161544607"></p>
<p>此为效果，但是对于去除中文是否同样有效存疑（或者可不可以先引入一个翻译图片中的中文为英文并输出之后再使用该算法）</p>
<h3 id="标注检测与去除"><a href="#标注检测与去除" class="headerlink" title="标注检测与去除"></a>标注检测与去除</h3><p>这块目前想到三种路线，第一种是噪声去除与修复，算法通过检测像素块颜色差距 or 别的方式得到修复后图片，具体如下(但感觉效果可能非常一般，因为我们的图片主要呈黑白状，色块差异不显著)</p>
<p><a href="https://openaccess.thecvf.com/content_cvpr_2018/papers/Ulyanov_Deep_Image_Prior_CVPR_2018_paper.pdf">Deep Image Prior-CVPR2018</a></p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250210173333934-1739480040433-3.png" alt="image-20250210173333934"></p>
<p><strong>DeepErase Weakly Supervised Ink Artifact Removal in Document Text Images</strong>, 这个是基于字去掉线，与第三章有点像，不知道是否也可以作为可行方案</p>
<p><a href="https://arxiv.org/pdf/1910.07070v3">DeepErase-2020IEEE&#x2F;WACV</a></p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250210174544756-1739480040433-2.png" alt="image-20250210174544756"></p>
<p>第二种是边缘检测，相当于原图片收到了标注线一定程度的遮挡，现在根据遮挡复原出原图，具体如下：</p>
<p><strong>EdgeConnect</strong>: Structure Guided Image Inpainting using Edge Prediction</p>
<p><a href="https://arxiv.org/pdf/1901.00212">EdgeConnect-2019IEEE&#x2F;ICCVW</a></p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250210174257891-1739480040433-6.png" alt="image-20250210174257891"></p>
<p>第三种，逆文本检测，相当于借助取【去字】的补集的思路，去字的逻辑是先把字提取出来，随后与原图一起丢进去训练，最后实现在原图去字的效果。现在我们想要保留的恰恰是 [<strong>字</strong>]，也就是说将字换成已经弄出来的结构图，随后修改去字代码，实现从原图中保留 <strong>字</strong>，这里就是我们需要的结构图。同时也可以忽略本来分开的先去字再去点线的思路，直接一步到位。</p>
<p>具体借鉴论文如下：</p>
<p><a href="https://arxiv.org/pdf/1910.07070v3">DeepErase-2020IEEE&#x2F;WACV</a></p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250210174544756-1739480040433-2.png" alt="image-20250210174544756"></p>
<ul>
<li><strong>TPFNet: A Novel Text In-painting Transformer for Text Removal</strong></li>
</ul>
<p><a href="https://arxiv.org/pdf/2210.14461">TPFNet-ICDAR2023</a></p>
<p><a href="https://github.com/CandleLabAI/TPFNet">TPFNet-Github</a></p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250210160346938-1739480040432-1.png" alt="image-20250210160346938"></p>
<p>下面是其提供的运行示例对比：</p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/3772cddab09ed7cb56b90f46bbb9624-1739480040433-10.png" alt="3772cddab09ed7cb56b90f46bbb9624"></p>
<p>这是我们需要的效果对比：</p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/c7edd070e9bf4ff71f40f37f41aed7b-1739480040433-5.png" alt="c7edd070e9bf4ff71f40f37f41aed7b"></p>
<h3 id="图片中转英"><a href="#图片中转英" class="headerlink" title="*图片中转英"></a>*图片中转英</h3><p><a href="https://chatgpt.com/share/67a9ce0f-78c4-8010-b9c0-438966597f75">与 chatgpt 的问答</a></p>
<h1 id="2-12"><a href="#2-12" class="headerlink" title="2.12"></a>2.12</h1><h2 id="边缘检测具体探索"><a href="#边缘检测具体探索" class="headerlink" title="边缘检测具体探索"></a>边缘检测具体探索</h2><h3 id="Occlusion-Free-Scene-Recovery-via-Neural-Radiance-Fields"><a href="#Occlusion-Free-Scene-Recovery-via-Neural-Radiance-Fields" class="headerlink" title="Occlusion-Free Scene Recovery via Neural Radiance Fields"></a>Occlusion-Free Scene Recovery via Neural Radiance Fields</h3><p><a href="https://cvpr.thecvf.com/media/cvpr-2023/Slides/22880.pdf">NeRF-CVPR2023</a></p>
<p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=10204900">paper</a></p>
<p><a href="https://freebutuselesssoul.github.io/occnerf/">code</a></p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250212160911351-1739480040433-4.png" alt="image-20250212160911351"></p>
<p>其中 f 是原图，a 是打标图，e 是该模型实现效果图</p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250212161014716-1739480040433-7.png" alt="image-20250212161014716"></p>
<h3 id="Generative-Image-Inpainting-with-Segmentation-Confusion-Adversarial-Training-and-Contrastive-Learning"><a href="#Generative-Image-Inpainting-with-Segmentation-Confusion-Adversarial-Training-and-Contrastive-Learning" class="headerlink" title="Generative Image Inpainting with Segmentation Confusion Adversarial Training and Contrastive Learning"></a>Generative Image Inpainting with Segmentation Confusion Adversarial Training and Contrastive Learning</h3><p><a href="https://ojs.aaai.org/index.php/AAAI/article/view/25502/25274">AAAI2023</a></p>
<p>这篇论文采用了 <strong>SCAT 和对比学习</strong> 的方法，感觉看下来边缘检测整体思路都是一样的，就是在换着技术路线提升准确度</p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250212163134758-1739480040434-12.png" alt="image-20250212163134758"></p>
<h3 id="Improving-Image-Inpainting-via-Adversarial-Collaborative-Training"><a href="#Improving-Image-Inpainting-via-Adversarial-Collaborative-Training" class="headerlink" title="Improving Image Inpainting via Adversarial Collaborative Training"></a>Improving Image Inpainting via Adversarial Collaborative Training</h3><p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=10814057">对抗性协作网络 AdvColabNet-IEEE&#x2F;Transactions on Multimedia2024</a></p>
<p>这篇文章提出了一个新思路，就是在修补好之后再引入一个修补纠错机制进一步提升性能</p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250212164855265-1739480040433-8.png" alt="image-20250212164855265"></p>
<h3 id="Minutes-to-Seconds-Speeded-up-DDPM-based-Image-Inpainting-with-Coarse-to-Fine-Sampling"><a href="#Minutes-to-Seconds-Speeded-up-DDPM-based-Image-Inpainting-with-Coarse-to-Fine-Sampling" class="headerlink" title="Minutes to Seconds: Speeded-up DDPM-based Image Inpainting with Coarse-to-Fine Sampling"></a>Minutes to Seconds: Speeded-up DDPM-based Image Inpainting with Coarse-to-Fine Sampling</h3><p><a href="https://arxiv.org/pdf/2407.05875">IEEE&#x2F;ICME2024</a></p>
<p>[Github](<a href="https://github.com/linghuyuhangyuan/M2S">linghuyuhangyuan&#x2F;M2S: Official PyTorch Code and Models of “Minutes to Seconds: Speeded-up DDPM-based Image Inpainting with Coarse-to-Fine Sampling”, ICME 2024</a>)</p>
<p>该方法基于 repaint 思路（基于去噪扩散概率模型 （DDPM） 的方法），主要是加快了速度提升了性能</p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250212165716257-1739480040433-11.png" alt="image-20250212165716257"></p>
<h3 id="MuGE-Multiple-Granularity-Edge-Detection-凌海滨老师"><a href="#MuGE-Multiple-Granularity-Edge-Detection-凌海滨老师" class="headerlink" title="MuGE: Multiple Granularity Edge Detection(凌海滨老师)"></a>MuGE: Multiple Granularity Edge Detection(凌海滨老师)</h3><p><a href="https://openaccess.thecvf.com/content/CVPR2024/papers/Zhou_MuGE_Multiple_Granularity_Edge_Detection_CVPR_2024_paper.pdf">MuGE-CVPR2024</a></p>
<p><a href="https://github.com/ZhouCX117/UAED_MuGE">Github</a></p>
<p>该方法主要是在已经做好边缘检测的基础上提供更多细节信息，相当于若是采用了别的办法只能得到模糊轮廓而电器内部信息忽略时可以采用该方法，看看提供的多种情况有没有合适的</p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250212170543015-1739480040434-13.png" alt="image-20250212170543015"></p>
<p><img src="/./%E5%AF%92%E5%81%87%E7%A7%91%E7%A0%94-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.assets/image-20250212170634850-1739480040434-14.png" alt="image-20250212170634850"></p>
<h3 id="Large-Occluded-Human-Image-Completion-via-Image-Prior-Cooperating"><a href="#Large-Occluded-Human-Image-Completion-via-Image-Prior-Cooperating" class="headerlink" title="Large Occluded Human Image Completion via Image-Prior Cooperating"></a>Large Occluded Human Image Completion via Image-Prior Cooperating</h3><p>主要与背景修复相关，略</p>
<p>AAAI-2023</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>寒假科研</tag>
      </tags>
  </entry>
  <entry>
    <title>算法基础课(持续更新中)</title>
    <url>/2025/02/14/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/</url>
    <content><![CDATA[<p>算法基础课</p>
<p>(置顶加一行top，数字控制top顺序)</p>
<h1 id="算法基础课"><a href="#算法基础课" class="headerlink" title="算法基础课"></a>算法基础课</h1><h2 id="基础算法（一）"><a href="#基础算法（一）" class="headerlink" title="基础算法（一）"></a>基础算法（一）</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i=l<span class="number">-1</span>,j=r<span class="number">+1</span>,x=q[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i++;<span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">quick_sort</span>(q,l,j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q,j<span class="number">+1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">merge_sort</span>(q,l,mid),<span class="built_in">merge_sort</span>(q,mid<span class="number">+1</span>,r)；</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>,i=l,j=mid<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)</span><br><span class="line">        <span class="keyword">if</span>(q[i]&lt;=q[j])tmp[k++]=q[i++];</span><br><span class="line">    <span class="keyword">else</span> tmp[k++]=q[j++];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)tmp[k++]=q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)tmp[k++]=q[j++];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=l,j=<span class="number">0</span>;i&lt;=r;i++,j++)q[i]=tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><h4 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;   <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="基础算法（二）"><a href="#基础算法（二）" class="headerlink" title="基础算法（二）"></a>基础算法（二）</h2><h3 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3><h4 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h4><p>本质上是模拟人进行列竖式加法的过程，即$a_1$+…+$a_n$+t，其中当$a$的退一位加起来不超过10则$t&#x3D;0$否则$t&#x3D;1$，以此类推</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">add</span>(vector&lt;<span class="type">int</span>&gt;&amp;A,vector&lt;<span class="type">int</span>&gt;&amp;B)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;C;</span><br><span class="line">    <span class="type">int</span> t=<span class="number">0</span>;<span class="comment">//存储每一位相加后的数，同时完成是否需要进位的考量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>()||i&lt;B.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;A.<span class="built_in">size</span>())t+=A[i];</span><br><span class="line">        <span class="keyword">if</span>(i&lt;B.<span class="built_in">size</span>())t+=B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(t%<span class="number">10</span>);</span><br><span class="line">        t/=<span class="number">10</span>;</span><br><span class="line">	&#125;    </span><br><span class="line">    <span class="keyword">if</span>(t)C.<span class="built_in">push_back</span>(<span class="number">1</span>);<span class="comment">//最后一个t代表最高位，因此等for循环运行完后再用判断看看进位情况，是的话就在vector后面再加一个1</span></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a,b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;A,B;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=b.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)B.<span class="built_in">push_back</span>(b[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="comment">//A、B元素进栈都是逆序进栈，比如a=&#x27;123456&#x27;,那A=[6.5,4,3,2,1],目的是方便进位多了1的时候整体数组挪动空间不大，否则要是最高位在前边ta进位后面数组所有数字都要往后挪</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> C=<span class="built_in">add</span>(A,B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)cout&lt;&lt;C[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="vector相关知识点"><a href="#vector相关知识点" class="headerlink" title="vector相关知识点"></a>vector相关知识点</h5><ul>
<li><p><strong>vector定义</strong> <code>vector</code> 是 C++ 标准模板库（STL）中的一个容器，它可以看作是一个动态数组。它能存储一系列相同类型的元素，并且可以根据需要自动调整大小。使用 <code>vector</code> 需要包含 <code>&lt;vector&gt;</code> 头文件。</p>
</li>
<li><p><strong>vector数组相关操作</strong>（最后面）增加用<code>.push_back(一个数)</code>，（最后面）删除<code>.pop_back(一个数)</code>，指定位置插入<code>.insert(向量,指定位置)</code>，指定位置删除<code>.erase(向量，指定位置)</code>，清空<code>.clear()</code>，查看大小<code>.size()</code></p>
</li>
<li><p><strong>vector元素的索引和数组一样，也是从 0 开始存储的</strong></p>
</li>
<li><p><strong>vector和普通数组区别</strong></p>
<p>1.大小灵活性</p>
<ul>
<li><strong>普通数组</strong>：大小在定义时就必须确定，且在程序运行过程中不能改变。例如 <code>int arr[10];</code> 定义了一个大小为 10 的整数数组，之后无法再改变其大小。</li>
<li><strong>vector</strong>：可以动态调整大小。可以使用 <code>push_back()</code> 方法在末尾添加元素，当空间不足时，<code>vector</code> 会自动分配更大的内存空间来存储元素。</li>
</ul>
<p>2.内存管理</p>
<ul>
<li><strong>普通数组</strong>：由程序员手动管理内存。如果数组在栈上分配，其生命周期受限于所在的代码块；如果在堆上分配（使用 <code>new</code>），则需要手动使用 <code>delete</code> 释放内存，否则会造成内存泄漏。</li>
<li><strong>vector</strong>：自动管理内存。当 <code>vector</code> 不再使用时，其占用的内存会自动释放，无需程序员手动干预。</li>
</ul>
<p>3.功能丰富度</p>
<ul>
<li><strong>普通数组</strong>：只提供基本的元素访问功能，操作相对有限。</li>
<li><strong>vector</strong>：提供了丰富的成员函数，如 <code>size()</code> 获取元素数量、<code>empty()</code> 判断是否为空、<code>clear()</code> 清空元素等，使用起来更加方便。</li>
</ul>
</li>
<li><p><strong>使用 vector 而不用数组的原因</strong></p>
<p>在大整数相加的场景中，输入的数字长度是不确定的。如果使用普通数组，需要预先定义一个足够大的数组来存储数字的每一位，但这样可能会浪费大量的内存空间。而 <code>vector</code> 可以根据输入数字的实际长度动态调整大小，避免了内存的浪费，并且其提供的 <code>push_back()</code> 方法可以方便地将数字的每一位添加到容器中，同时在处理进位时也更加方便。因此，使用 <code>vector</code> 能更好地适应这种动态长度的需求。</p>
</li>
</ul>
<h5 id="add函数运行示例"><a href="#add函数运行示例" class="headerlink" title="add函数运行示例"></a>add函数运行示例</h5><p>假设我们要计算两个四位数 <code>a = 1234</code> 和 <code>b = 5678</code> 的和。</p>
<p>在代码中，输入的数字以字符串形式存储，然后将其逆序存储到 <code>vector&lt;int&gt;</code> 中，这样做是为了方便处理进位。对于 <code>a = 1234</code>，存储在 <code>vector&lt;int&gt;</code> 中为 <code>A = &#123;4, 3, 2, 1&#125;</code>；对于 <code>b = 5678</code>，存储在 <code>vector&lt;int&gt;</code> 中为 <code>B = &#123;8, 7, 6, 5&#125;</code>。</p>
<p>具体步骤：</p>
<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
初始化</p>
</li>
<li><p><code>vector&lt;int&gt; C;</code>：用于存储相加结果的向量，初始为空。</p>
</li>
<li><p><code>int t = 0;</code>：用于存储每一位相加后的结果以及进位信息，初始值为 0。</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
循环处理每一位</p>
</li>
</ul>
<p>循环条件为 <code>i &lt; A.size() || i &lt; B.size()</code>，这意味着只要 <code>A</code> 或 <code>B</code> 还有未处理的位，就会继续循环。</p>
<ul>
<li><p><input disabled="" type="checkbox"> 
第一次循环（<code>i = 0</code>）</p>
</li>
<li><p><code>if(i &lt; A.size()) t += A[i];</code>：因为 <code>i = 0</code> 小于 <code>A.size()</code>（4），所以 <code>t = t + A[0] = 0 + 4 = 4</code>。</p>
</li>
<li><p><code>if(i &lt; B.size()) t += B[i];</code>：因为 <code>i = 0</code> 小于 <code>B.size()</code>（4），所以 <code>t = t + B[0] = 4 + 8 = 12</code>。</p>
</li>
<li><p><code>C.push_back(t % 10);</code>：将 <code>t % 10</code>（即 2）添加到 <code>C</code> 中，此时 <code>C = &#123;2&#125;</code>。</p>
</li>
<li><p><code>t /= 10;</code>：<code>t</code> 除以 10，得到进位 1，即 <code>t = 1</code>。</p>
</li>
<li><p><input disabled="" type="checkbox"> 
第二次循环（<code>i = 1</code>）</p>
</li>
<li><p><code>if(i &lt; A.size()) t += A[i];</code>：<code>t = t + A[1] = 1 + 3 = 4</code>。</p>
</li>
<li><p><code>if(i &lt; B.size()) t += B[i];</code>：<code>t = t + B[1] = 4 + 7 = 11</code>。</p>
</li>
<li><p><code>C.push_back(t % 10);</code>：将 <code>t % 10</code>（即 1）添加到 <code>C</code> 中，此时 <code>C = &#123;2, 1&#125;</code>。</p>
</li>
<li><p><code>t /= 10;</code>：<code>t</code> 除以 10，得到进位 1，即 <code>t = 1</code>。</p>
</li>
<li><p><input disabled="" type="checkbox"> 
第三次循环（<code>i = 2</code>）</p>
</li>
<li><p><code>if(i &lt; A.size()) t += A[i];</code>：<code>t = t + A[2] = 1 + 2 = 3</code>。</p>
</li>
<li><p><code>if(i &lt; B.size()) t += B[i];</code>：<code>t = t + B[2] = 3 + 6 = 9</code>。</p>
</li>
<li><p><code>C.push_back(t % 10);</code>：将 <code>t % 10</code>（即 9）添加到 <code>C</code> 中，此时 <code>C = &#123;2, 1, 9&#125;</code>。</p>
</li>
<li><p><code>t /= 10;</code>：<code>t</code> 除以 10，得到进位 0，即 <code>t = 0</code>。</p>
</li>
<li><p><input disabled="" type="checkbox"> 
第四次循环（<code>i = 3</code>）</p>
</li>
<li><p><code>if(i &lt; A.size()) t += A[i];</code>：<code>t = t + A[3] = 0 + 1 = 1</code>。</p>
</li>
<li><p><code>if(i &lt; B.size()) t += B[i];</code>：<code>t = t + B[3] = 1 + 5 = 6</code>。</p>
</li>
<li><p><code>C.push_back(t % 10);</code>：将 <code>t % 10</code>（即 6）添加到 <code>C</code> 中，此时 <code>C = &#123;2, 1, 9, 6&#125;</code>。</p>
</li>
<li><p><code>t /= 10;</code>：<code>t</code> 除以 10，得到进位 0，即 <code>t = 0</code>。</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
处理最后可能的进位</p>
</li>
</ul>
<p><code>if(t) C.push_back(1);</code></p>
<p>因为此时 <code>t = 0</code>，所以不需要添加额外的进位，<code>C</code> 仍然为 <code>&#123;2, 1, 9, 6&#125;</code>。</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 返回结果</li>
</ul>
<p><code>return C;</code>：返回存储相加结果的向量 <code>C</code>。</p>
<p>在 <code>main</code> 函数中，将 <code>C</code> 逆序输出，得到最终结果 <code>6912</code>，即 <code>1234 + 5678 = 6912</code>。</p>
<h5 id="auto的用法"><a href="#auto的用法" class="headerlink" title="auto的用法"></a>auto的用法</h5><p><code>auto</code>是C++11的新特性，可以自动识别变量属性。比如<code>auto C=add(A,B);</code>就自动识别了add返回的类型，因此<code>auto C &lt;=&gt; vector&lt;int&gt;c</code></p>
<h5 id="a-i-0-的作用：将字符串每一位由ASCII码转为整数"><a href="#a-i-0-的作用：将字符串每一位由ASCII码转为整数" class="headerlink" title="a[i] - &#39;0&#39; 的作用：将字符串每一位由ASCII码转为整数"></a><code>a[i] - &#39;0&#39;</code> 的作用：将字符串每一位由ASCII码转为整数</h5><p>在 C++ 中，当你从输入读取一个数字字符串时，比如 <code>&quot;123&quot;</code>，字符串中的每个字符（如 <code>&#39;1&#39;</code>、<code>&#39;2&#39;</code>、<code>&#39;3&#39;</code>）实际上存储的是字符的 ASCII 码值，而不是对应的数值。字符 <code>&#39;0&#39;</code> 到 <code>&#39;9&#39;</code> 的 ASCII 码是连续的，<code>&#39;0&#39;</code> 的 ASCII 码值是 48，<code>&#39;1&#39;</code> 是 49，以此类推，<code>&#39;9&#39;</code> 是 57。</p>
<p><code>b[i] - &#39;0&#39;</code> 的作用就是将字符形式的数字转换为对应的整数值。例如，当 <code>b[i]</code> 为 <code>&#39;1&#39;</code> 时，<code>&#39;1&#39;</code> 的 ASCII 码值是 49，<code>&#39;0&#39;</code> 的 ASCII 码值是 48，那么 <code>&#39;1&#39; - &#39;0&#39;</code> 就等于 <code>49 - 48 = 1</code>，这样就把字符 <code>&#39;1&#39;</code> 转换为了整数 1。</p>
<p>如果没有 <code>b[i] - &#39;0&#39;</code> 这个操作，直接将字符存储到 <code>vector&lt;int&gt;</code> 中，那么存储的是字符的 ASCII 码值，而不是对应的数值，这会导致后续的计算出现错误。</p>
<h4 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h4><h4 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h4><h4 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h4>]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>ACWing</tag>
      </tags>
  </entry>
</search>
